@page "/scooters"
@inject HttpClient Http
@using TrotIS.Shared
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@if (email != null)
{
    <h1>Available scooters are at: </h1>
    <select @bind="@locationGuidDrop" class="form-control bg-white border-left-0 border-md" placeholder="location">
        @foreach (var adr in allOurLocations)
        {
            <option value="@adr.LocationID">@adr.Comment</option>

        }
    </select>
    <button @onclick="@generateScooters" class="btn btn-primary btn-block py-2">Search</button>


    <table id="scooters" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Autonomy</th>
                <th>Speed Limit</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var scootean in allOurScootersInstance)
            {
                <tr>
                    <td>@scootean.Scooter.Brand @scootean.Scooter.Model</td>
                    <td>@scootean.Price</td>
                    <td>@scootean.ScooterAutonomy</td>
                    <td>@scootean.Scooter.SpeedLimit</td>
                </tr>
               
            }


        </tbody>
    </table>
}
else
{
    <h1>No usser logged in</h1>
}

@code{
    public string email = null;
    private List<Location> allOurLocations = new List<Location>();
    private Location selectedLocation = new Location();
    private List<ScooterInstance> allOurScootersInstance = new List<ScooterInstance>();
    private List<Guid> allScootersGuid = new List<Guid>();
    private List<Scooter> allScooters = new List<Scooter>();
    private Guid locationGuidDrop;


    string URL = @"http://localhost:5009/api/locations";
    string URLGuidScooter = @"http://localhost:5009/api/locations/scooters_ids_from_location";
    string URLScooters = @"http://localhost:5005/api/scooterinstance/get_all_scooters";
    string URLScooterInstances = @"http://localhost:5005/api/scooterinstance/get_all_scooterinstances";
    private Guid location = Guid.Empty;
    public async void GetOurLocations()
    {
        try
        {
            var result = await Http.GetAsync(URL);

            allOurLocations = await result.Content.ReadAsAsync<List<Location>>();

            this.StateHasChanged();
        }
        catch
        { }
    }
    private async void generateScooters()
    {
        await GetOurScootersGuid(locationGuidDrop);
    }
    protected async override void OnInitialized()
    {

        try
        {
            email = await sessionStorage.GetItemAsync<string>("hash");
            GetOurLocations();

            this.StateHasChanged();
        }
        catch { }


    }


    private async Task GetOurScootersGuid(Guid locationId)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<Guid>(URLGuidScooter, locationId);

            allScootersGuid = await result.Content.ReadAsAsync<List<Guid>>();
        }
        catch
        { }
        try
        {
            var result = await Http.PostAsJsonAsync<List<Guid>>(URLScooterInstances, allScootersGuid);

            allOurScootersInstance = await result.Content.ReadAsAsync<List<ScooterInstance>>();

        }
        catch
        { }
        try
        {
            var result = await Http.PostAsJsonAsync<List<Guid>>(URLScooters, allScootersGuid);

            allScooters = await result.Content.ReadAsAsync<List<Scooter>>();

        }
        catch
        { }

    }


    private class Location
    {
        public Guid LocationID { get; set; }

        [Required(ErrorMessage = "Longitude is required.")]
        public decimal Longitude { get; set; }

        [Required(ErrorMessage = "Longitude is required.")]
        public decimal Latitude { get; set; }


        public string Comment { get; set; }

        public Location()
        {
            LocationID = Guid.NewGuid();
        }

        public static Location Create(decimal longitude, decimal latitude, string comment)
        {
            return new Location
            {
                LocationID = Guid.NewGuid(),
                Longitude = longitude,
                Latitude = latitude,
                Comment = comment
            };
        }
    }

    public class Scooter
    {
        public Guid ScooterId { get; set; }
        public string Brand { get; set; }
        public string Model { get; set; }
        public int BatteryLife { get; set; } //km
        public int AgeLimitMin { get; set; }
        public int AgeLimitMax { get; set; }
        public int WeightMax { get; set; } //kg
        public int SpeedLimit { get; set; } //km/h
        public int ClimbAngle { get; set; } //degree
        public string ImgName { get; set; }

        //public ICollection<ScooterInstance> ScooterInstances { get; set; }

        public Scooter()
        {
            ScooterId = Guid.NewGuid();
        }

        public static Scooter Create(string brand, string model, int batterylife, int agelimitmin, int agelimitmax, int weightmax, int speedlimit, int climbangle, string imgName)
        {
            return new Scooter
            {
                ScooterId = Guid.NewGuid(),
                //ScooterInstances = new List<ScooterInstance>(),
                Brand = brand,
                Model = model,
                BatteryLife = batterylife,
                AgeLimitMin = agelimitmin,
                AgeLimitMax = agelimitmax,
                WeightMax = weightmax,
                SpeedLimit = speedlimit,
                ClimbAngle = climbangle,
                ImgName = imgName,
            };
        }
    }
    public class ScooterInstance
    {
        public Guid ScooterInstanceId { get; set; }

        public int ScooterAutonomy { get; set; } //km

        public Scooter Scooter { get; set; }

        public decimal Price { get; set; }

        public ScooterInstance()
        {
            ScooterInstanceId = Guid.NewGuid();
        }

        public static ScooterInstance Create(int scooterAutonomy, decimal price, Scooter scooter)
        {
            return new ScooterInstance
            {
                ScooterInstanceId = Guid.NewGuid(),
                ScooterAutonomy = scooterAutonomy,
                Price = price,
                Scooter = scooter
            };
        }

        public void Update(int scooterAutonomy)
        {
            ScooterAutonomy = scooterAutonomy;
        }
    }

}
