@page "/scooters"
@inject HttpClient Http
@using TrotIS.Shared
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using Newtonsoft.Json;
@if (email != null)
{
    <h1>Available scooters are at: </h1>
    <select @bind="@locationGuidDrop" class="form-control bg-white border-left-0 border-md" placeholder="location">
        <option value="">Select an item</option>
        @foreach (var adr in allOurLocations)
        {
            <option value="@adr.LocationID">@adr.Comment</option>

        }
    </select>
    <button @onclick="@generateScooters" class="btn btn-primary btn-block py-2">Search</button>

    <br />
    <br />
    <table id="scooters" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Brand</th>
                <th>Model</th>
                <th>Speed Limit</th>
                <th>Price</th>
                <th>Autonomy</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ScooterInstance scootean in allOurScootersInstance)
            {
            <tr>
                <td>@scootean.Scooter.Brand</td>
                <td>@scootean.Scooter.Model</td>
                <td>@scootean.Scooter.SpeedLimit</td>
                <td>@scootean.Price</td>
                <td>@scootean.ScooterAutonomy</td>

            </tr>

            }


        </tbody>
    </table>
    <br />
    <br />
    if (allOurScootersInstance.Count > 0)
    {
        <h1>Rent a scooter </h1>





        <EditForm Model="@rent" OnValidSubmit="@rentScooter" OnInvalidSubmit="@OnInvalidSubmit">

            <InputSelect id="rentid" @bind-Value="rentIdTemp">
                <option value="">Select an scooter</option>
                @foreach (ScooterInstance scootea in allOurScootersInstance)
                        {
                    <option value="@scootea.ScooterInstanceId.ToString()">@scootea.Scooter.Brand @scootea.Scooter.Model - @scootea.Price Lei (@scootea.ScooterAutonomy h)</option>

                        }
                /**/
                /**/
                /**/
            </InputSelect>

            @*Startdate*@
            <div class="input-group col-lg-12 mb-4">
                <div class="input-group-prepend">
                    <span class="input-group-text bg-white px-4 border-md border-right-0">
                        <i class="fa fa-birthday-cake"></i>
                    </span>
                </div>
                <InputDate Id="sdate" Class="form-control bg-white border-left-0 border-md" @bind-Value="@rent.StartDate" placeholder="Start date"></InputDate>

            </div>

            <div class="input-group col-lg-12 mb-4">
                <div class="input-group-prepend">
                    <span class="input-group-text bg-white px-4 border-md border-right-0">
                        <i class="fa fa-birthday-cake"></i>
                    </span>
                </div>
                <InputDate Id="edate" Class="form-control bg-white border-left-0 border-md" @bind-Value="@rent.EndDate" placeholder="End date"></InputDate>

            </div>

            <DataAnnotationsValidator />
            <ValidationSummary />
            <button type="submit" class="btn btn-primary btn-block py-2">Rent</button>
            <div class="alert @StatusClass">@StatusMessage</div>
            <!-- Line -->


        </EditForm>
    }
}
else
{
    <h1>No usser logged in</h1>
}

@code{
    public string email = null;
    private List<Location> allOurLocations = new List<Location>();
    private Location selectedLocation = new Location();
    private List<ScooterInstance> allOurScootersInstance = new List<ScooterInstance>();
    private List<Guid> allScootersGuid = new List<Guid>();
    private List<Scooter> allScooters = new List<Scooter>();
    private string locationGuidDrop = "";
    private string rentIdTemp = "";
    public Rent rent = new Rent();
    private string StatusMessage;
    private string StatusClass;


    string URL = @"http://localhost:5009/api/locations";
    string rentURL = @"http://localhost:5007/api/rent";
    string URLGuidScooter = @"http://localhost:5009/api/locations/scooters_ids_from_location";
    string URLScooters = @"http://localhost:5005/api/scooterinstance/get_all_scooters";
    string URLScooterInstances = @"http://localhost:5005/api/scooterinstance/get_all_scooterinstances";
    private Guid location = Guid.Empty;

    protected void OnInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = "You already have an active rent";
    }

    private async void rentScooter()
    {
        rent.UserId = await sessionStorage.GetItemAsync<Guid>("userID");
        rent.ScooterInstanceId = Guid.Parse(rentIdTemp);
        rent.LocationId = Guid.Parse(locationGuidDrop);
        var response = await Http.PostAsJsonAsync(rentURL, rent);
        if (response.StatusCode.ToString() == "NotFound")
            OnInvalidSubmit();

        this.StateHasChanged();
    }
    public async void GetOurLocations()
    {
        try
        {
            var result = await Http.GetAsync(URL);

            allOurLocations = await result.Content.ReadAsAsync<List<Location>>();

            this.StateHasChanged();
        }
        catch
        { }
    }

    private async void generateScooters()
    {
        await GetOurScootersGuid(Guid.Parse(locationGuidDrop));
    }

    protected async override void OnInitialized()
    {

        try
        {
            email = await sessionStorage.GetItemAsync<string>("hash");
            GetOurLocations();
            this.StateHasChanged();
        }
        catch { }


    }


    private async Task GetOurScootersGuid(Guid locationId)
    {
        try
        {
            var result = await Http.PostAsJsonAsync<Guid>(URLGuidScooter, locationId);

            allScootersGuid = await result.Content.ReadAsAsync<List<Guid>>();
        }
        catch
        { }

        try
        {
            var result = await Http.PostAsJsonAsync<List<Guid>>(URLScooterInstances, allScootersGuid);
            var tempInst = await result.Content.ReadAsStringAsync();
            allOurScootersInstance = JsonConvert.DeserializeObject<List<ScooterInstance>>(tempInst);
            var a = 2;

        }
        catch
        { }

        try
        {
            var result = await Http.PostAsJsonAsync<List<Guid>>(URLScooters, allScootersGuid);

            allScooters = await result.Content.ReadAsAsync<List<Scooter>>();

        }
        catch { }
        this.StateHasChanged();

    }


    private class Location
    {
        public Guid LocationID { get; set; }

        [Required(ErrorMessage = "Longitude is required.")]
        public decimal Longitude { get; set; }

        [Required(ErrorMessage = "Longitude is required.")]
        public decimal Latitude { get; set; }


        public string Comment { get; set; }

        public Location()
        {
            LocationID = Guid.NewGuid();
        }

        public static Location Create(decimal longitude, decimal latitude, string comment)
        {
            return new Location
            {
                LocationID = Guid.NewGuid(),
                Longitude = longitude,
                Latitude = latitude,
                Comment = comment
            };
        }
    }

    public class Scooter
    {
        public Guid ScooterId { get; set; }
        public string Brand { get; set; }
        public string Model { get; set; }
        public int BatteryLife { get; set; } //km
        public int AgeLimitMin { get; set; }
        public int AgeLimitMax { get; set; }
        public int WeightMax { get; set; } //kg
        public int SpeedLimit { get; set; } //km/h
        public int ClimbAngle { get; set; } //degree
        public string ImgName { get; set; }

        //public ICollection<ScooterInstance> ScooterInstances { get; set; }

        public Scooter()
        {
            ScooterId = Guid.NewGuid();
        }

        public static Scooter Create(string brand, string model, int batterylife, int agelimitmin, int agelimitmax, int weightmax, int speedlimit, int climbangle, string imgName)
        {
            return new Scooter
            {
                ScooterId = Guid.NewGuid(),
                //ScooterInstances = new List<ScooterInstance>(),
                Brand = brand,
                Model = model,
                BatteryLife = batterylife,
                AgeLimitMin = agelimitmin,
                AgeLimitMax = agelimitmax,
                WeightMax = weightmax,
                SpeedLimit = speedlimit,
                ClimbAngle = climbangle,
                ImgName = imgName,
            };
        }
    }
    public class ScooterInstance
    {
        public Guid ScooterInstanceId { get; set; }

        public int ScooterAutonomy { get; set; } //km

        public Scooter Scooter { get; set; }

        public decimal Price { get; set; }

        public ScooterInstance()
        {
            ScooterInstanceId = Guid.NewGuid();
        }

        public static ScooterInstance Create(int scooterAutonomy, decimal price, Scooter scooter)
        {
            return new ScooterInstance
            {
                ScooterInstanceId = Guid.NewGuid(),
                ScooterAutonomy = scooterAutonomy,
                Price = price,
                Scooter = scooter
            };
        }

        public void Update(int scooterAutonomy)
        {
            ScooterAutonomy = scooterAutonomy;
        }
    }


    public class Rent
    {
        public Guid RentId { get; set; }
        public Guid LocationId { get; set; }
        public Guid UserId { get; set; }
        public Guid ScooterInstanceId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }

}
