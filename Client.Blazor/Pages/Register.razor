@page "/register"
@inject HttpClient Http
@using TrotIS.Shared
@using Microsoft.AspNetCore.Components;
@inject NavigationManager navManager
@inject IJSRuntime jsRuntime
<!-- Navbar-->
<header class="header">
    <nav class="navbar navbar-expand-lg navbar-light py-3">
        <div class="container">
            <!-- Navbar Brand -->
            <a href="#" class="navbar-brand">
                TrotIS logo
                @*<img src="https://res.cloudinary.com/mhmd/image/upload/v1571398888/Group_1514_tjekh3_zkts1c.svg" alt="logo" width="150">*@
            </a>
        </div>
    </nav>
</header>


<div class="container">
    <div class="row py-5 mt-4 align-items-center">
        <div class="col-md-5 pr-lg-5 mb-5 mb-md-0">
            <img src="https://res.cloudinary.com/mhmd/image/upload/v1569543678/form_d9sh6m.svg" alt="" class="img-fluid mb-3 d-none d-md-block">
            <h1>Create an Account</h1>
        </div>

        <!-- Registeration Form -->
        <div class="col-md-7 col-lg-6 ml-auto">

            <EditForm Model="@user" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@RegisterUser">


                <div class="form-group">

                </div>
                @*Firstname*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle" aria-hidden="true"></i>
                        </span>
                    </div>
                    <InputText Id="firstName" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.FirstName" placeholder="First Name"></InputText>
                    
                </div>
                @*LastName*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputText Id="lastName" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.LastName" placeholder="Last Name"></InputText>
                    
                </div>
                @*Email*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-envelope text-muted"></i>
                        </span>
                    </div>
                    <InputText Id="email" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.Email" placeholder="Email"></InputText>
                    
                </div>
                @*Phone number*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-phone"></i>
                        </span>
                    </div>
                    <InputText Id="phoneNumber" Class="form-control bg-white border-md border-left-0 pl-3" @bind-Value="@user.Phone" placeholder="Phone number"></InputText>
                    
                </div>
                @*Job*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-md"></i>
                        </span>
                    </div>
                    <InputSelect id="socialclass" @bind-Value="user.SocialClass" class="form-control bg-white border-left-0 border-md" placeholder="Social Class">
                        <option value="">Select social class ...</option>
                        <option value="elev">Elev</option>
                        <option value="student">Student</option>
                        <option value="pensionar">Pensionar</option>
                        <option value="normal">Normal</option>
                        <option value="scutit">Scutit</option>
                    </InputSelect>
                    
                </div>
                @*Birthdate*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-birthday-cake"></i>
                        </span>
                    </div>
                    <InputDate Id="bdate" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.BirthDay" placeholder="Birth date"></InputDate>
                    
                </div>
                @*Password*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-key"></i>
                        </span>
                    </div>
                    <InputText type="password" placeholder="Password" Class="form-control" @bind-Value="@user.Password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                @*rety[e p[assowrd*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-key"></i>
                        </span>
                    </div>
                    <InputText type="password" placeholder="Confirm Password" Class="form-control" @bind-Value="@user.PasswordConfirmation" />
                    <ValidationMessage For="@(() => user.PasswordConfirmation)" />
                </div>
                <div class="alert @StatusClass">@StatusMessage</div>

                <DataAnnotationsValidator />
                <ValidationSummary />
                <button type="submit" class="btn btn-primary btn-block py-2">Create your account</button>
                <!-- Line -->
                <div class="form-group col-lg-12 mx-auto d-flex align-items-center my-4">
                    <div class="border-bottom w-100 ml-5"></div>
                    @*<span class="px-2 small text-muted font-weight-bold text-muted">OR</span>*@
                    <div class="border-bottom w-100 mr-5"></div>
                </div>

                <!-- Already Registered -->
                <div class="text-center w-100">
                    <p class="text-muted font-weight-bold">Already have an account?<a href="/login" class="text-primary ml-2">Login!</a></p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string ToastContent { get; set; }
    private string apiUrl = "http://localhost:5003/api/user";
    private string apiUrlCheck = "http://localhost:5003/check";
    private User user = new User();
    private string StatusMessage;
    private string StatusClass;
    private async void RegisterUser()
    {

        //verify if email already exists
        var result = await Http.PostAsJsonAsync(apiUrlCheck, user);
        var content = await result.Content.ReadAsStringAsync();
        if (content != string.Empty)
        {
            ToastContent = content;
            Invalid(ToastContent);
            //show a popup with ToastContent error
            //I Installed a package for this
            //documentation here: https://ej2.syncfusion.com/blazor/documentation/toast/config/
            //or use javascript idk...

            //after that you should remain on current page and modify email/phone

        }
        else if(user.Password == user.PasswordConfirmation)
        {
            user.UserId = Guid.NewGuid();
            user.Address = null;
            await Http.PostAsJsonAsync(apiUrl, user);

            //show popup you are now logged in - timout 2 sec
            //go to home after that
            //only here the register button should redirect // va fi logat aici
            navManager.NavigateTo("/", false);
        }
        //else -- if fail
        else
            navManager.NavigateTo("/register", false); //show popup password!=confirmpassword and remain on current page to modify password.

    }
    private void NavigateToLoginComponent()
    {
        navManager.NavigateTo("/login", true); //asta cred ca e useless aici
    }

    public class User
    {

        [Required(ErrorMessage = "Email is required.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "password is required.")]
        [MinLength(8, ErrorMessage = "password must be atleast 8 characters")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "re-type password is required.")]
        [Compare(nameof(Password), ErrorMessage = "password dosent match")]
        public string PasswordConfirmation { get; set; }

        [Required(ErrorMessage = "Firstname is required.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Lastname is required.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Phone is required.")]
        public string Phone { get; set; }

        [Required(ErrorMessage = "Birthdate is required.")]
        public DateTime BirthDay { get; set; }

        [Required(ErrorMessage = "Social is required.")]
        public EnumLists.SocialClass SocialClass { get; set; }

        public virtual Address Address { get; set; }
        public Guid UserId { get; set; }


    }

    protected void HandleValidSubmit()
    {
        StatusClass = "alert-info";
        StatusMessage = "You're registered now!";
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " something went wrong";
    }

    protected void Invalid(string content)
    {
        StatusClass = "alert-danger";
        StatusMessage = content;
    }
}
