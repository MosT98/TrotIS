@page "/editprofile"
@inject HttpClient Http
@using TrotIS.Shared
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
<!-- Navbar-->
<div class="container">
    <h1>Edit Profile, @lname @fname</h1>
    <hr>
    <div class="row">


        <!-- edit form column -->
        <div class="col-md-9 personal-info">
            <h3>Personal info</h3>

            <EditForm Model="@user" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@EditInfoUser">


                <div class="form-group">

                </div>
                @*Firstname*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle" aria-hidden="true"></i>
                        </span>
                    </div>
                    <InputText Id="firstName" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.FirstName" placeholder=""></InputText>

                </div>
                @*LastName*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputText Id="lastName" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.LastName" placeholder="Last Name"></InputText>

                </div>
                @*Password*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-key"></i>
                        </span>
                    </div>
                    <InputText type="password" placeholder="Password" Class="form-control" @bind-Value="@user.Password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                @*rety[e p[assowrd*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-key"></i>
                        </span>
                    </div>
                    <InputText type="password" placeholder="Confirm Password" Class="form-control" @bind-Value="@user.PasswordConfirmation" />
                    <ValidationMessage For="@(() => user.PasswordConfirmation)" />
                </div>
                Adress settings:
                @*Country*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputText Id="country" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.Address.Country" placeholder="Country..."></InputText>

                </div>
                @*City*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputText Id="city" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.Address.City" placeholder="City"></InputText>

                </div>
                @*Street*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputText Id="street" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.Address.Street" placeholder="Street"></InputText>

                </div>
                @*Number*@
                <div class="input-group col-lg-12 mb-4">
                    <div class="input-group-prepend">
                        <span class="input-group-text bg-white px-4 border-md border-right-0">
                            <i class="fa fa-user-circle"></i>
                        </span>
                    </div>
                    <InputNumber Id="number" Class="form-control bg-white border-left-0 border-md" @bind-Value="@user.Address.Number" placeholder="Number"></InputNumber>

                </div>
                <div class="alert @StatusClass">@StatusMessage</div>

                <DataAnnotationsValidator />
                <ValidationSummary />
                <button type="submit" class="btn btn-primary btn-block py-2">Update account</button>
                <!-- Line -->
                <div class="form-group col-lg-12 mx-auto d-flex align-items-center my-4">
                    <div class="border-bottom w-100 ml-5"></div>
                    @*<span class="px-2 small text-muted font-weight-bold text-muted">OR</span>*@
                    <div class="border-bottom w-100 mr-5"></div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<hr>

@code{
    public string email = null;
    public string fname = null;
    public string lname = null;
    public Guid userid = Guid.Empty;

    private string apiUrl = "http://localhost:5003/api/user";
    private string getUserURL = "http://localhost:5003/api/user/";



    private string StatusMessage;
    private string StatusClass;
    public class User
    {


        [Required(ErrorMessage = "Firstname is required.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Lastname is required.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "password is required.")]
        [MinLength(8, ErrorMessage = "password must be atleast 8 characters")]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required(ErrorMessage = "re-type password is required.")]
        [Compare(nameof(Password), ErrorMessage = "password dosent match")]
        public string PasswordConfirmation { get; set; }

        public virtual Address Address { get; set; }
        public Guid UserId { get; set; }

    }
    public class UserReceive
    {
        public Guid UserId { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string Phone { get; set; }
        public DateTime BirthDay { get; set; }
        public EnumLists.SocialClass SocialClass { get; set; }
        public Address Address = null;

    }
    private User user = new User();
    private UserReceive userReceive = new UserReceive();
    protected async override void OnInitialized()
    {
        try
        {
            fname = await sessionStorage.GetItemAsync<string>("firstname");
            email = await sessionStorage.GetItemAsync<string>("hash");
            lname = await sessionStorage.GetItemAsync<string>("lastname");
            userid = await sessionStorage.GetItemAsync<Guid>("UserID");
            getUserURL = getUserURL + "/f7006319-4f97-4143-a7f9-b64c6475a1b9";
            var content = await Http.GetAsync(getUserURL);
            userReceive = await content.Content.ReadAsAsync<UserReceive>();
            this.StateHasChanged();
        }
        catch
        {

        }

    }


    private async void EditInfoUser()
    {
        // user.UserId = await sessionStorage.GetItemAsync<Guid>("UserID");

        var result = await Http.PutAsJsonAsync(apiUrl, user);
        if (result!=null)
        {
            NavigationManager.NavigateTo("/", true);
        }
        //succesfully message or not

    }




    protected void HandleValidSubmit()
    {
        StatusClass = "alert-info";
        StatusMessage = DateTime.Now + " Handle valid submit";
    }

    protected void HandleInvalidSubmit()
    {
        StatusClass = "alert-danger";
        StatusMessage = DateTime.Now + " Handle invalid submit";
    }


}