@page "/"
@using BlazorAnimate
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<header class="header">
    <nav class="navbar navbar-expand-lg navbar-light py-3">
        <div class="container">
            <!-- Navbar Brand -->
            <a href="#" class="navbar-brand">
                <img src="Resources/logo.png" alt="logo" width="150" />
            </a>
        </div>
    </nav>
</header>


<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(10)">
    <h1>
        TrotIS - Rent a Scooter
    </h1>
</Animate>


<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(10)">
    <h1>
        Benefits
    </h1>
</Animate>

<ul class="list-group">
    <li class="list-group-item list-group-item-success">The possibility to rent a scooter only with a virtual card.</li>
    <li class="list-group-item list-group-item-info">Different types of subscriptions(students, employees, etc.)</li>
    <li class="list-group-item list-group-item-warning">The possibility to see informations about a scooter at a certain time(model, autonomy, etc.)</li>
    <li class="list-group-item list-group-item-info">Current status of your rented scooter.</li>
    <li class="list-group-item list-group-item-success">The possibility to see scooters stations near your location.</li>
</ul>

@if (isLogged)
{
    if (!empty)
    {
        <br />
        <br />
        <br />
        <h1>
            Current Rent
        </h1>
        <table id="rent" class="display" style="width:100%">
            <thead>
                <tr>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Scooter Battery</th>
                    <th>Rent Location</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@myRent.StartDate </td>
                    <td>@myRent.EndDate</td>
                    <td>@battery</td>
                    <td>@comment</td>
                </tr>
            </tbody>
        </table>
    }
    if (!emptyHist)
    {
        <br />
        <br />
        <h1>
            Rent History
        </h1>
        <table id="rent-history" class="display" style="width:100%">
            <thead>
                <tr>
                    <th>Order Date</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var obj in myRentHistory.Reverse())
                {
                    <tr>
                        <td>@obj.OrderDate </td>
                        <td>@obj.StartDate </td>
                        <td>@obj.EndDate</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code{
    public bool isLogged = false;
    public bool empty = true;
    public bool emptyHist = true;
    public Rent myRent = new Rent();
    public IEnumerable<Rent> myRentHistory = new List<Rent>();
    public Guid LocationId;
    public Guid ScooterInstanceID;
    public string comment = "";
    public string battery = "";

    protected async override void OnInitialized()
    {
        try
        {
            string hash = "";
            hash = await sessionStorage.GetItemAsync<string>("hash");
            if (hash != null)
                isLogged = true;
            this.StateHasChanged();
            if (isLogged)
            {
                LoadCurrentRent();
                LoadRentHistory();
            }

        }
        catch
        {

        }
    }

    public async void LoadCurrentRent()
    {
        var userId = await sessionStorage.GetItemAsync<Guid>("userID");
        string URL = "http://localhost:5007/api/rent/GetByIdUser/";
        string URLfin = URL + userId.ToString();
        var result = await Http.GetAsync(URLfin);
        if (result.StatusCode.ToString() != "NotFound")
        {
            myRent = await result.Content.ReadAsAsync<Rent>();
            empty = false;
            LocationId = myRent.LocationId;
            string URLloc = "http://localhost:5009/api/locations/comment_from_id";
            var resultLoc = await Http.PostAsJsonAsync(URLloc, LocationId);
            if (resultLoc.StatusCode.ToString() != "NotFound")
            {
                comment = await resultLoc.Content.ReadAsStringAsync();
            }
            ScooterInstanceID = myRent.ScooterInstanceId;
            string URLscooter = "http://localhost:5005/api/scooterinstance/autonomy_by_id";
            var resultScooter = await Http.PostAsJsonAsync(URLscooter, ScooterInstanceID);
            if (resultScooter.StatusCode.ToString() != "NotFound")
            {
                battery = await resultScooter.Content.ReadAsStringAsync();
            }

        }
        else
            empty = true;
        this.StateHasChanged();

    }
    public async void LoadRentHistory()
    {
        var userId = await sessionStorage.GetItemAsync<Guid>("userID");
        string URL = "http://localhost:5007/api/rent/GetByIdUserCancelled/";
        string URLfin = URL + userId.ToString();
        var result = await Http.GetAsync(URLfin);
        if (result.StatusCode.ToString() != "NotFound")
        {
            myRentHistory = await result.Content.ReadAsAsync<List<Rent>>();
            emptyHist = false;
        }
        else
        {
            emptyHist = true;
        }
        this.StateHasChanged();
    }


    public class Rent
    {
        public Guid RentId { get; set; }
        public Guid LocationId { get; set; }
        public Guid UserId { get; set; }
        public Guid ScooterInstanceId { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public bool IsCancelled { get; set; }
    }
}