@page "/"
@using BlazorAnimate
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime
@*@inherits SiteMapperBase*@
@inject NavigationManager NavigationManager

<header class="header">
    <nav class="navbar navbar-expand-lg navbar-light py-3">
        <div class="container">
            <!-- Navbar Brand -->
            <a href="#" class="navbar-brand">
                <img src="Resources/logo.png" alt="logo" width="150" />
            </a>
        </div>
    </nav>
</header>


<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(10)">
    <h1>
        TrotIS - Rent a Scooter
    </h1>
</Animate>


<Animate Animation="Animations.FadeIn" Duration="TimeSpan.FromSeconds(10)">
    <h1>
        Benefits
    </h1>
</Animate>

<ul class="list-group">
    <li class="list-group-item list-group-item-success">The possibility to rent a scooter only with a virtual card.</li>
    <li class="list-group-item list-group-item-info">Different types of subscriptions(students, employees, etc.)</li>
    <li class="list-group-item list-group-item-warning">The possibility to see informations about a scooter at a certain time(model, autonomy, etc.)</li>
    <li class="list-group-item list-group-item-info">Current status of your rented scooter.</li>
    <li class="list-group-item list-group-item-success">The possibility to see scooters stations near your location.</li>
</ul>

@if (isLogged)
{
    <h1>
        Current Rent
    </h1>

}

@code{
    public bool isLogged = false;
    protected async override void OnInitialized()
    {
        try
        {
            string hash = "";
            hash = await sessionStorage.GetItemAsync<string>("hash");
            if (hash != string.Empty)
                isLogged = true;
            if (isLogged)
            {
                LoadCurrentRent();
                }
            //this.StateHasChanged();
        }
        catch
        {

        }
    }

    public async void LoadCurrentRent()
    {
        var userId = await sessionStorage.GetItemAsync<Guid>("userID");
        string URL = "http://localhost:5007/api/rent/GetByIdUser/";
        string URLfin = URL + userId.ToString();
        var result = Http.GetAsync(URLfin);
        //var content = await result.Content.ReadAsAsync<Rent>();
    }

    private class Rent
    {
        public Guid RentId { get; set; }
        public Guid LocationId { get; set; }
        public Guid UserId { get; set; }
        public Guid ScooterInstanceId { get; set; }
        public DateTime OrderDate { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public bool IsCancelled { get; set; }
    }
}