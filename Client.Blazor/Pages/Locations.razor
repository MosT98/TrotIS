@page "/locations"
@using Client.Blazor.Data
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime
@inherits SiteMapperBase
@inject NavigationManager NavigationManager

<h1>Locations</h1>

<div id='map'></div>

	@**@


@if (isAdmin)
{
	<br />
	<br />
	<h1>Manage locations</h1>

	<div class="input-group col-lg-12 mb-4">

		@if (allLocations.Count == 0)
		{
			<h2>Loading locations...</h2>
		}
		else
		{
			<div class="col-md-12 col-lg-6">
				<EditForm Model="@newLocation" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@AddLocation">
					<h2>Add new location</h2><br />
					@*Comment*@
					<label>Name of location</label><br />
					<div class="input-group col-lg-12 mb-4">
						<div class="input-group-prepend">
							<span class="input-group-text bg-white px-4 border-md border-right-0">
								<i class="fa fa-user-circle" aria-hidden="true"></i>
							</span>
						</div>
						<input type="text" Id="comment" Class="form-control bg-white border-left-0 border-md" @bind="@newLocation.Comment" placeholder="Name of location" />
					</div>

					@*Latitude*@
					<label>Longitude</label><br />
					<div class="input-group col-lg-12 mb-4">
						<div class="input-group-prepend">
							<span class="input-group-text bg-white px-4 border-md border-right-0">
								<i class="fa fa-location-arrow" aria-hidden="true"></i>
							</span>
						</div>
						<input type="number" step="any" Id="latitude" Class="form-control bg-white border-left-0 border-md" @bind="@latitude" placeholder="Latitude" />
						<ValidationMessage For="@(() => latitude)" />
					</div>

					@*Longitude*@
					<label>Latitude</label><br />
					<div class="input-group col-lg-12 mb-4">
						<div class="input-group-prepend">
							<span class="input-group-text bg-white px-4 border-md border-right-0">
								<i class="fa fa-location-arrow"></i>
							</span>
						</div>

						<input type="number" step="any" Id="longitude" Class="form-control bg-white border-left-0 border-md" @bind="@longitude" placeholder="Latitude" />
						<ValidationMessage For="@(() => longitude)" />
					</div>

					<button type="submit" class="btn btn-primary btn-block py-2">Add location</button>
				</EditForm>

				<!-- Line -->
				<div class="form-group col-lg-12 mx-auto d-flex align-items-center my-4">
					<div class="border-bottom w-100 ml-5"></div>
					@*<span class="px-2 small text-muted font-weight-bold text-muted">OR</span>*@
					<div class="border-bottom w-100 mr-5"></div>
				</div>

				<br />

				<EditForm Model="@selectedLocation" OnInvalidSubmit="@HandleInvalidSubmit" OnValidSubmit="@DeleteLocation">
					<h2>Delete a location</h2>
					<select @bind="selectedLocation.LocationID" class="form-control bg-white border-left-0 border-md" placeholder="Latitude">
						@if (allLocations.Count > 0)
						{
							@foreach (var adr in allLocations)
							{
								<option value="@adr.LocationID">@adr.Comment</option>
							}
						}
					</select>
					<br />
					<button type="submit" class="btn btn-primary btn-block py-2">Delete selected location</button>
				</EditForm>
			</div>
		}
	</div>
}
@code{
	public bool isAdmin = false;
	private Location selectedLocation = new Location();
	private Location newLocation = new Location();
	private List<Location> allLocations = new List<Location>();
	private double latitude, longitude;

	private string StatusMessage;
	private string StatusClass;
	private string ToastContent { get; set; }

	string URL = @"http://localhost:5009/api/locations";

	public async void GetLocations()
	{
		var result = await Http.GetAsync(URL);

		allLocations = await result.Content.ReadAsAsync<List<Location>>();
		this.StateHasChanged();
	}

	protected async override void OnInitialized()
	{
		try
		{
			isAdmin = await sessionStorage.GetItemAsync<bool>("admin");
			this.StateHasChanged();

			GetLocations();
		}
		catch
		{

		}
	}

	private async void AddLocation()
	{
		newLocation.Latitude = (decimal)latitude;
		newLocation.Longitude = (decimal)longitude;

		var result = await Http.PostAsJsonAsync(URL, newLocation);
		var content = await result.Content.ReadAsStringAsync();
		if (content != string.Empty)
		{
			this.StateHasChanged();
			NavigationManager.NavigateTo("/locations", true);
		}
		else
		{
			ToastContent = content;
			Invalid(ToastContent);
		}
	}

	private async void DeleteLocation()
	{
		var result = await Http.DeleteAsync(URL + "/{" +  selectedLocation.LocationID+"}");
		var content = await result.Content.ReadAsStringAsync();
		if (content != string.Empty)
		{
			this.StateHasChanged();
			NavigationManager.NavigateTo("/locations", true);
		}
		else
		{
			ToastContent = content;
			Invalid(ToastContent);
		}
	}

	private class Location
	{
		public Guid LocationID { get; set; }

		[Required(ErrorMessage = "Longitude is required.")]
		public decimal Longitude { get; set; }

		[Required(ErrorMessage = "Longitude is required.")]
		public decimal Latitude { get; set; }


		public string Comment { get; set; }

		public Location()
		{
			LocationID = Guid.NewGuid();
		}

		public static Location Create(decimal longitude, decimal latitude, string comment)
		{
			return new Location
			{
				LocationID = Guid.NewGuid(),
				Longitude = longitude,
				Latitude = latitude,
				Comment = comment
			};
		}
	}


	protected void HandleValidSubmit()
	{
		StatusClass = "alert-info";
		StatusMessage = "Location has been added!";
	}

	protected void HandleInvalidSubmit()
	{
		StatusClass = "alert-danger";
		StatusMessage = DateTime.Now + " something went wrong";
	}

	protected void Invalid(string content)
	{
		StatusClass = "alert-danger";
		StatusMessage = content;
	}

}
