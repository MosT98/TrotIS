// <auto-generated />
using System;
using LocationAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LocationAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200108203059_location_added")]
    partial class location_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LocationAPI.Data.Location", b =>
                {
                    b.Property<Guid>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddressID")
                        .HasColumnType("uuid");

                    b.Property<bool>("valid")
                        .HasColumnType("boolean");

                    b.HasKey("LocationID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationID = new Guid("b4b821df-fac2-4b76-b4ac-10f3dd1ce8ce"),
                            AddressID = new Guid("6719bc69-b700-40a3-8c00-ecf14eb977cd"),
                            valid = true
                        });
                });

            modelBuilder.Entity("LocationAPI.Data.LocationsToScooters", b =>
                {
                    b.Property<Guid>("LocationID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScooterInstanceID")
                        .HasColumnType("uuid");

                    b.HasKey("LocationID", "ScooterInstanceID");

                    b.ToTable("LinkLocationsToScooterInstances");

                    b.HasData(
                        new
                        {
                            LocationID = new Guid("b4b821df-fac2-4b76-b4ac-10f3dd1ce8ce"),
                            ScooterInstanceID = new Guid("65a1ecd5-5ac1-434b-8c35-1bedcee04dd4")
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
